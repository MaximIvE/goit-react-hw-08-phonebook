{"version":3,"file":"static/js/525.fff754cc.chunk.js","mappings":"2RAIaA,EAAYC,EAAAA,GAAAA,KAAH,mUAeTC,EAAQD,EAAAA,GAAAA,MAAH,6EAMLE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,EAAPH,CAAH,kH,SCfjBI,EAAe,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAETC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAYlBG,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAClBC,EAASC,EAAOJ,GAAMK,SAE5B,OAEI,UAAChB,EAAD,CAAWM,SAfM,SAAAW,GACjBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAAcD,KAAKE,MAC5BC,EAAQL,EAAEG,cAAcE,MAAMD,MAC9BE,EAAWN,EAAEG,cAAcG,SAASF,MAE1Cf,EAAS,CAACa,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KASvB,WACI,kBAAOC,QAASjB,EAAhB,SAA8BO,EAAQK,QACtC,SAACjB,EAAD,CACIiB,KAAK,OACLM,KAAK,OACLC,GAAInB,EACJoB,UAAQ,KAGZ,kBAAOH,QAASf,EAAhB,SAA+BK,EAAQQ,SACvC,SAACpB,EAAD,CACIiB,KAAK,QACLM,KAAK,QACLC,GAAIjB,EACJkB,UAAQ,KAEZ,kBAAOH,QAASd,EAAhB,SAAkCI,EAAQS,YAC1C,SAACrB,EAAD,CACIiB,KAAK,WACLM,KAAK,WACLC,GAAIhB,EACJiB,UAAQ,KAEZ,SAACxB,EAAD,CACIgB,KAAK,WADT,SAEML,EAAQc,yBAO9B,GAAeC,EAAAA,EAAAA,MAAKxB,GC7DPyB,EAAU7B,EAAAA,GAAAA,IAAH,iDAIP8B,EAAQ9B,EAAAA,GAAAA,EAAH,kU,oBC+BlB,EA1BqB,WACjB,IAAMU,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAClBC,EAASC,EAAOJ,GAAMqB,UAEtBC,GAASC,EAAAA,EAAAA,MACf,GAA0BC,EAAAA,EAAAA,IAAYC,EAAAA,IAA/BC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAQf,OAPgBH,EAAAA,EAAAA,IAAYI,EAAAA,KAQjB,SAAC,KAAD,CAAUC,GAAG,eAIpB,UAACV,EAAD,YACI,wBAAKhB,EAAQ2B,kBACb,SAAC,EAAD,CAAcnC,SAZH,SAACoC,GAEhBT,GAASU,EAAAA,EAAAA,IAAOD,OAWXL,IAAU,SAACN,EAAD,UAAQO,S,8EC7B/B,ECAmB,CACXM,SAAU,YACVC,UAAW,aDFZD,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,UACjB,ECIe,CACPC,SAAU,kBACVC,SAAU,wBAEVC,SAAU,wBACVC,SAAU,kBACVC,UAAW,yBACXC,UAAW,mBDXZL,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAAUC,EAA/C,EAA+CA,UAAWC,EAA1D,EAA0DA,UAC7C/C,EAASH,EAAAA,GAAAA,OAAH,2dAMmB6C,EAA+BC,EAAuBC,EAAyBC,EAIzFL,EAIAC,EACcC,EAA+BC,EAAuBG,EAA0BC,I,sDEnBnH,IAkBI3C,EAAS,eAAC4C,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC9B,EAAI+B,GAWvD,OARE/B,IAFF+B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/RegisterPage.jsx","styles/placeholders.styled.jsx","styles/colors.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Button } from '../../styles/placeholders.styled';\n\n\nexport const DataInput = styled.form`\n  font-size: 1.1em;\n    text-align: start;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    padding: 4px 20px;\n    text-shadow: 1px 1px 2px black, 0 0 1em black, 0 0 0.2em black;\n    @media (min-width:480px){\n        padding: 12px;\n        max-width: 16em;\n  };\n  \n`;\n\nexport const Input = styled.input`\npadding: 2px;\nfont-size: 1em;\nmargin-bottom: 8px;\n`;\n\nexport const ButtonForm = styled(Button)`\nmargin-top: 12px;\nwidth: 8em;\nmargin-left: auto;\nmargin-right: auto;\nfont-size: 1em;\n`;\n","import { memo, useContext} from 'react';\n\nimport { nanoid } from 'nanoid';\n// import PropTypes from 'prop-types';\nimport langContext from 'langContext';\n\nimport locale from '../../shared/materials/langauges.json';\nimport { DataInput, ButtonForm, Input } from './RegisterForm.styled';\n\n\nconst RegisterForm = ({onSubmit})=>{\n\n        const idInputName = nanoid();\n        const idInputEmail = nanoid();\n        const idInputPassword = nanoid();\n\n        const handleSubmit = e => {\n            e.preventDefault();\n            const name = e.currentTarget.name.value;\n            const email = e.currentTarget.email.value;\n            const password = e.currentTarget.password.value;\n            // console.log(\"name=\",name,\"; email=\",email,\"; password=\",password);\n            onSubmit({name, email, password});\n            // e.currentTarget.reset();\n        };\n\n        const lang = useContext(langContext);\n        const content= locale[lang].userform;\n\n        return (\n            \n            <DataInput onSubmit={handleSubmit}>\n                <label htmlFor={idInputName}>{content.name}</label>\n                <Input\n                    name=\"name\"\n                    type=\"text\"\n                    id={idInputName}\n                    required\n                />\n                \n                <label htmlFor={idInputEmail}>{content.email}</label>\n                <Input\n                    name=\"email\"\n                    type=\"email\"\n                    id={idInputEmail}\n                    required\n                />\n                <label htmlFor={idInputPassword}>{content.password}</label>\n                <Input\n                    name=\"password\"\n                    type=\"password\"\n                    id={idInputPassword}\n                    required\n                />\n                <ButtonForm \n                    name=\"register\" \n                    >{content.registerbuttonText}\n                </ButtonForm>\n            </DataInput>\n            \n        );\n};\n\nexport default memo(RegisterForm);\n\n// DataInputForm.propTypes={\n//     addContact: PropTypes.func.isRequired,\n// }\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    text-align: center;\n`;\n\nexport const Error = styled.p`\n    display: inline-block;\n    padding: 4px;\n    color: rgba(255, 255, 255, 0.96);\n    font-weight: 500;\n    background-color: rgba(255, 0, 0, 0.6);\n    \n  /* transition-property: background-color; */\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0, 0, 0.1, 1);\n`;","import { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Wrapper, Error} from './RegisterPage.styled';\n\nimport langContext from 'langContext';\nimport locale from '../../shared/materials/langauges.json';\nimport { signup } from 'redux/auth/auth-operations';\nimport { getAuthError, getAuthisLogin } from 'redux/auth/auth-selectors';\n\nconst RegisterPage = () => {\n    const lang = useContext(langContext);\n    const content= locale[lang].pagesUser;\n\n    const dispatch=useDispatch();\n    const {status, message} = useSelector(getAuthError);\n    const isLogin = useSelector(getAuthisLogin);\n\n    const onRegister = (data) => {\n        // console.log(data);\n        dispatch(signup(data))\n    }\n\n    if(isLogin){\n        return <Navigate to=\"/contacts\"/>\n    }\n\n    return (\n        <Wrapper>\n            <h2>{content.registerHeader}</h2>\n            <RegisterForm onSubmit={onRegister}/>\n            {status && <Error>{message}</Error>}\n        </Wrapper>\n    );\n};\n\nexport default RegisterPage;","import styled from \"styled-components\";\nimport { color } from \"./colors\";\n\nconst {hoverBtn, activeBtn} = color.backgroundBtn;\nconst {shInset1, shInset2, shHover1, shHover2, shActive1, shActive2} = color.shadowBtn;\nexport const Button = styled.button`\n    border:none;\n    // font:inherit;\n    cursor: pointer;\n    outline: none;\n    border-radius: 4px;\n    box-shadow: inset -2px -2px 2px ${shInset1}, inset 2px 2px 2px ${shInset2}, 0 2px 1px ${shHover1}, 2px 4px 4px ${shHover2};\n    padding: 4px 6px 4px 4px;    \n\n    &:hover{\n        background-color: ${hoverBtn};\n    };\n\n    &:active{\n        background-color: ${activeBtn};\n        box-shadow: inset -2px -2px 2px ${shInset1}, inset 2px 2px 2px ${shInset2}, 0 2px 0px ${shActive1}, 2px 2px 2px ${shActive2};\n    }\n`\n","export const color = {\n    backgroundBody:  \"rgba(162, 196, 197,1)\",\n\n    backgroundBtn: {\n        hoverBtn: '#e0e5ebf3',\n        activeBtn: '#e0e5ebdd',\n    },\n\n    shadowBtn: {\n        shInset1: 'rgba(0,0,0,0.3)',\n        shInset2: 'rgba(255,255,255,0.5)',\n\n        shHover1: 'rgba(193,193,193,0.1)',\n        shHover2: 'rgba(0,0,0,0.2)',\n        shActive1: 'rgba(193,193,193,0.15)',\n        shActive2: 'rgba(0,0,0,0.3)',\n    }\n};\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["DataInput","styled","Input","ButtonForm","Button","RegisterForm","onSubmit","idInputName","nanoid","idInputEmail","idInputPassword","lang","useContext","langContext","content","locale","userform","e","preventDefault","name","currentTarget","value","email","password","htmlFor","type","id","required","registerbuttonText","memo","Wrapper","Error","pagesUser","dispatch","useDispatch","useSelector","getAuthError","status","message","getAuthisLogin","to","registerHeader","data","signup","hoverBtn","activeBtn","shInset1","shInset2","shHover1","shHover2","shActive1","shActive2","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}